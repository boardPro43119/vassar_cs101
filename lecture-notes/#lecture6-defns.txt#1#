#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1154 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 24 #"test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; CS101 Lecture Notes     "
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Spring 2019              "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Use Advanced Student language for this lecture."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; THE STRUCTURE OF STRINGS:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; Strings are stored as indexed sequences of characters. The index"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; number for a particular string str always starts at 0 and ends at"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; (string-length str) - 1. This is called \"0-based indexing\" and"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; it is used for most compound data structures in computer language"
 #"s."
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";;            "
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";; USING STRING FUNCTIONS:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; There are many functions written to perform operations on strings"
 #",  "
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";; including those most commonly used:  "
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;           STRING-LENGTH (1-parameter function)"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;            (string-length str) -> integer"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;            input:  str: string"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;            output: returns the number of characters in str"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;           STRING-APPEND (any number of parameters)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;            (string-append str1 str2 ...) -> string"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;            input:  str1,str2,...: string"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;            output: returns str1 str2 ... as a single string"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;           SUBSTRING (2-parameter version)"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;            (substring str pos1) -> string"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;            input:  str: string; pos1: integer"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;            output: returns string starting at pos1 to end of str"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;           SUBSTRING (3-parameter version)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;            (substring str pos1 pos2) -> string"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;            input:  str: string; pos1 pos2: integers"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;            output: returns string starting at pos1 to pos2-1"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;           STRING-REF (2-parameter function)"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;            (string-ref str pos) -> char"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;            input:  str: string; pos: integer"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;            output: returns the character at the given position "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;           STRING (any number of parameters)   "
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;            (string char1 char2 ...) -> string"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;            input:  char1,char2,...: >= 1 char"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;            output: returns a string composed of given chars"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;           STRING? (1 parameter)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;            (string? arg) -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;            input:  arg is any valid scheme type"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;            output: boolean, #t only if arg is a string"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";;  The string counterpart to the empty list is the empty string, \""
 #"\""
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;  Many string functions have counterparts that have similar names "
 #"and"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;  actions as list functions do. We will look at non-empty lists in"
 #" the"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";;  next part of this lecture."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";; USING FUNCTIONS THAT CONVERT ONE TYPE TO ANOTHER:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; As you look through the built-in functions in the Help Desk, you "
 #"  "
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; will see many names that contain a \"->\".  When this pattern of "
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; characters is used in a function name, the function is generally"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; a TYPE CONVERTER.  Examples of type converting functions:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;      SYMBOL->STRING"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;       (symbol->string sym) -> string"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;       input:  quoted symbol sym"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;       output: string representation of symbol"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;      STRING->SYMBOL"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;       (string->symbol str) -> quoted symbol"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;       input:  str is a string (with no blank spaces)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;       output: symbol representation of string"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;      STRING->NUMBER"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;       (string->number numstr) -> number or false"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;       input:  numstr is a string"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;       output: number or false if numstr is not a string"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;               representation of a number"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;      NUMBER->STRING "
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;       (number->string num) -> string"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;       input:  num is a number"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;       output: string representation of num"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; NEXT: Non-Empty Lists"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; The QUOTE special form (or ') has the action of shielding its arg"
 #"ument from"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; evaluation.  A list written as '(a b c) does not undergo default "
 #"eval;"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";; instead, it represents a non-empty list of quoted symbols."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; LISTS: SELF-REFERENTIAL DATA STRUCTURE FOR DATA SETS OF ARBITRARY"
 #" SIZE"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; The standard data structure provided in Racket to hold arbitrary "
 #"amounts "
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; of data is called a *list*: a list is a sequentially arranged gro"
 #"uping"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";; of values, ending with the empty list. "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; The smallest possible list is the empty list, represented by the "
 #"word"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";; empty, null, or '().  "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";; BASIC FUNCTIONS FOR THE LIST DATA TYPE:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; CONS: The cons function is one way to make non-empty lists "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;       by adding one new element at a time to the left side"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;       (first position) of an existing list (which MUST start"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;       out being the empty list)."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; The contract for the cons function looks like this:"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;     (cons a (list of any)) -> (list of any) ; a is now first elem"
 #"ent"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; cons is called a list CONSTRUCTOR for a non-empty list."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; There are FIELDS that can be accessed in a non-empty list: "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;    first - returns the leftmost item from a non-empty list"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;    rest  - returns everything except the left-most item in a "
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;            non-empty list. Always returns a list."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;     The contract for the FIRST function looks like this:"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;            (first (cons Y (list of anything))) -> Y  "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;     The contract for the REST function looks like this:"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;        (rest (cons Y (list of anything))) -> (list of anything) "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; DEFINITION OF SELF-REFERENTIAL DATA TYPE LIST:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; In general, a list can be defined as being either:"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; 1. empty, or"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; 2. the result of (cons element existing_list)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; Since you need a list to create a list, you must start by consing"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; an element onto the empty list."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; Each of the expressions below is equivalent, creating a list that"
 #" contains"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";; only the value 10 and the empty list"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; (cons 10 empty)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; (cons 10 null)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (cons 10 '())"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; a longer list is given a name using define:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"listy"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; DRAW PICTURE OF listy "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Using the first and rest functions on constructed lists "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"listy"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"listy"
0 0 24 3 3 #")) "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"listy"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"listy"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Lists don't have to hold just one data type, e.g.:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"multlisty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"bird\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"multlisty"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"bird\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; Built-in functions that consume and/or produce lists (NOTE THAT E"
 #"ACH HAS"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";; A STRING COUNTERPART EXCEPT FOR THE REVERSE FUNCTION):"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; CREATING A LIST (WITHOUT USING CONS EXPLICITLY):"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; list      Contract: (list x ...) -> list (similar to string funct"
 #"ion)"
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";;           input:    x ... = any valid Racket type(s)"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;           output  Constructs a list of its arguments."
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;                      "
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;           '(1 2 3) is equivalent to (list 1 2 3) ... but don't us"
 #"e '"
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #";;            to make a list inside functions.  "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;           "
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;           Every symbol inside a quoted list is treated like a quo"
 #"ted"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";;           symbol and is not looked up in the GE or LE:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;           "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;           '(a b c) is equivalent to (list 'a 'b 'c)"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;           '(1 2 3) numbers can't be quoted, so equivalent to (lis"
 #"t 1 2 3)"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";;           '(\""
0 0 17 3 1 #"A"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"B"
0 0 17 3 52 #"\") strings can't be quoted, so equivalent to (list \""
0 0 17 3 1 #"A"
0 0 17 3 3 #"\" \""
0 0 17 3 3 #"B\")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; FINDING THE LENGTH OF A LIST:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; length    Contract: (length listy) -> number           (like stri"
 #"ng-length)"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";;           input:    listy is a list of anything, possibly empty"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;           output: returns the number of elements in listy."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; CREATING A SINGLE LIST FROM SUBLISTS:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; append    Contract: (append list1 list2 ...) -> list     (like st"
 #"ring-append)"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";;           input:    list1,list2,...are lists of anything"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;           output:   Creates a single list from several lists."
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;                     Elements from lists are ordered left to "
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;                     right, in same order given. "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; REVERSING A LIST:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; reverse   Contract: (reverse lst) -> list    ==> no string equiva"
 #"lent"
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #";;           input:    lst is a list of anything"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;           output:   return lst with all elements reversed."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; TYPE CHECKERS for empty lists: EMPTY? and NULL?"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";;  "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; The empty? and null? functions check for the empty list, with the"
 #"      "
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";; contract:"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;           (empty? (cons 5 empty)) -> boolean (#f--list not empty)"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;           (null? '()) -> boolean  (#t only for empty list)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; TYPE CHECKER for non-empty lists: CONS?"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; The cons? function checks for a non-empty list, with "
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; contract:"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;         (cons? (cons 8 empty)) ;-> boolean (#t only for non-empty"
 #" list)"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; TYPE CHECKER for any list: LIST?"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; The list? function returns #t if its argument is either an empty "
 #"or "
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";; non-empty list."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Write a function that consumes a list with a fixed number of eleme"
 #"nts."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Ex: Write a function that consumes a list of 4 numbers and produce"
 #"s the "
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #";     product of the 4 items."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(prod-of-4 lon) -> number"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";lon is a list of 4 numbers"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";Outputs the product of all 4 numbers in lon"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; PRE-FUNCTION TESTS:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"prod-of-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"prod-of-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; FUNCTION DEFINITION:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"prod-of-4"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; What happens if we wanted to do the same thing with a list of hund"
 #"reds of"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; elements?  This is what is meant when computer scientists talk abo"
 #"ut "
) 0 0 24 29 1 #"\n"
0 0 17 3 3 #"; \""
0 0 17 3 72
(
 #"scalability\".  This function does not work for lists longer than 4 "
 #"so we"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #"; say it's unscalable."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #"; SELF-REFERENTIAL DATA DEFINITIONS: "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   A list of numbers (LON) is either"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";   1. empty, or"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   2. it is a non-empty list that was made using (cons n numlist), "
 #"where "
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";      n is a number and numlist is an LON one item smaller than "
0 0 24 29 1 #"\n"
0 0 17 3 24 #";      (cons n numlist)."
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";  You will see that, when using lists of arbitrary size, THE SHAPE "
 #"OF "
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";  FUNCTIONS THAT CONSUME A LIST MATCH THE SHAPE OF THE DATA DEFINIT"
 #"ION. "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Since lists may have any size, we need to develop a new type of fu"
 #"nction"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; that can handle an arbitrary amount of data.  This type of functio"
 #"n is"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #"; called RECURSIVE."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; NAIVE DEFINITION OF RECURSIVE FUNCTION:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";        A function is recursive if it calls itself. "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                   ---------------"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; If we defined recursion using solely the definition above, we coul"
 #"d write a "
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#"; function like the following (definitely not a good idea):    "
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rec-func"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"rec-func"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 14 #"))            "
0 0 17 3 40 #";; NOT A TERMINATING RECURSIVE FUNCTION;"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";                            ;; GOES INTO AN INFINITE LOOP. TRY IT."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; If you want a recursive function to terminate, you need to take th"
 #"e leftmost"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; item off the list in each recursive call and call the function rec"
 #"ursively"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #"; on the rest of the list."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #"; The general pattern of recursive functions:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; *  The body of a recursive function contains a decision statement "
 #"(e.g. cond)."
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";                     "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; *  There is at least one base case, or stopping condition, to end "
 #"the "
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";    function execution. "
0 0 24 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; *  There is at least one recursive case, or repeating condition, i"
 #"n"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";    which the function calls itself with a different argument that "
 #"is"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";    CLOSER TO THE BASE CASE than the current parameter value in the"
 #" last"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";    call."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; Ex 1: Write a recursive function called appender that consumes a "
 #"list of"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;       strings and outputs all strings appended as they appear in "
 #"the list, "
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";;       from left to right."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; SELF-REFERENTIAL DATA DEFINITION FOR A LIST OF STRINGS:"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; A list of strings (LOS) is either:"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; 1. empty, or"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; 2. it's a (cons s los), where s is a string and los is an LOS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; PRE-FUNCTION COMMENTS:"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; - (appender list-of-strings) -> string"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; - list-of-strings is an LOS"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; - append all strings in list-of-strings"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Example definitions of lists to use as test cases:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"SLIST"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"log"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"log"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"log"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"log"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"log"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"GREETING"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Hi "
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"how "
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"are "
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"you?"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Pre-function tests: "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"appender"
0 0 24 3 1 #" "
0 0 14 3 5 #"SLIST"
0 0 24 3 2 #") "
0 0 19 3 17 #"\"logloglogloglog\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"appender"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"appender"
0 0 24 3 1 #" "
0 0 14 3 8 #"GREETING"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 2 #"Hi"
0 0 19 3 1 #" "
0 0 19 3 3 #"how"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 6 #" you?\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Function definition:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"appender"
0 0 24 3 1 #" "
0 0 14 3 15 #"list-of-strings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 15 #"list-of-strings"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 15 #"list-of-strings"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"appender"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 15 #"list-of-strings"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Post-function tests:"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(printf \""
0 0 17 3 3 #"  ("
0 0 17 3 8 #"appender"
0 0 17 3 1 #" "
0 0 17 3 5 #"SLIST"
0 0 17 3 2 #") "
0 0 17 3 6 #"should"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 7 #"~a\\n\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 10 #";        \""
0 0 17 3 16 #"logloglogloglog\""
0 0 24 29 1 #"\n"
0 0 17 3 26 #";        (appender SLIST))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(printf \""
0 0 17 3 3 #"  ("
0 0 17 3 8 #"appender"
0 0 17 3 1 #" "
0 0 17 3 8 #"GREETING"
0 0 17 3 2 #") "
0 0 17 3 6 #"should"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 7 #"~a\\n\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 10 #";        \""
0 0 17 3 2 #"Hi"
0 0 17 3 1 #" "
0 0 17 3 3 #"how"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 1 #" "
0 0 17 3 5 #"you?\""
0 0 24 29 1 #"\n"
0 0 17 3 29 #";        (appender GREETING))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(printf \""
0 0 17 3 3 #"  ("
0 0 17 3 8 #"appender"
0 0 17 3 1 #" "
0 0 17 3 5 #"empty"
0 0 17 3 2 #") "
0 0 17 3 6 #"should"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 7 #"~a\\n\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 11 #";        \"\""
0 0 24 29 1 #"\n"
0 0 17 3 26 #";        (appender empty))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;RECURSIVE FUNCTION WITH TWO RECURSIVE CALLS;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; Ex 2: Write a function called add-even that consumes a list of"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;       numbers and returns the sum of the even numbers. "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;       This example is different than the ones we've seen because "
 #"it "
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";;       requires more than one recursive case: one for even numbers"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;       and another for odd numbers."
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;       "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; A list of numbers (LON) is either:"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; 1. empty, or"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; 2. it's a (cons n list-of-nums), where n is a number and list-of-"
 #"nums is"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;    an LON."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; PRE-FUNCTION COMMENTS:"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; - (add-even list-of-nums) -> number"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; - list-of-nums is a LON"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; - Produces sum of all even numbers in list-of-nums "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Pre-function tests: "
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(check-expect (add-even (list 2 3 6 7 11)) 8)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(check-expect (add-even (list 20 21 1)) 20) "
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(check-expect (add-even (list 1 3 5 7) 0)"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(check-expect (add-even empty) 0)             ;; ALWAYS test the em"
 #"pty list"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Function definition:"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(define (add-even list-of-num)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Post-function printfs:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;LIST PRODUCING FUNCTION;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; Ex 3: Write a function called even-t-odd-f that consumes a list o"
 #"f positive"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;       integers of any size and produces a list containing true fo"
 #"r every "
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";;       even integer on the list and false for every odd integer."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;PRE-FUNCTION COMMENTS:"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; - (even-t-odd-f nos) -> list of booleans"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; - nos:list of positive integers"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; - Produce the list containing #t for every even integer"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;   in nos and #f for every odd number."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Pre-function tests:"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";(check-expect (even-t-odd-f (list 1 2 3 4 5 6)) (list #f #t #f #t #"
 #"f #t))"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";(check-expect (even-t-odd-f (list 1111 1113 5 9 2)) (list #f #f #f "
 #"#f #t))  "
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";(check-expect (even-t-odd-f empty) empty)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Function definition:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(define (even-t-odd-f nos)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Post-function PRINTFs:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(newline)(newline)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0           0
