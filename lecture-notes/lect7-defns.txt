;; CS101 Lecture Notes     
;; Spring 2019              
;;
;; Use the Swindle language for this lecture.
(require test-engine/racket-tests) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LISTS: SELF-REFERENTIAL DATA STRUCTURE FOR DATA SETS OF ARBITRARY SIZE
;;
;; The standard data structure provided in Racket to hold arbitrary amounts 
;; of data is called a *list*: a list is a sequentially arranged grouping
;; of values, ending with the empty list. 
;;
;; The smallest possible list is the empty list, represented by the word
;; empty, null, or '().  
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; BASIC FUNCTIONS FOR THE LIST DATA TYPE:
;; 
;; CONS: The cons function is one way to make non-empty lists 
;;       by adding one new element at a time to the left side
;;       (first position) of an existing list (which MUST start
;;       out being the empty list).
;;
;; The contract for the cons function looks like this:
;;     (cons a (list of any)) -> (list of any) ; a is now first element
;;
;; cons is called a list CONSTRUCTOR for a non-empty list.
;;
;; There are FIELDS that can be accessed by the following 2 functions: 
;;    first - returns the leftmost item from a non-empty list
;;    rest  - returns everything except the left-most item in a 
;;            non-empty list. Always returns a list.
;;
;;     The contract for the FIRST function looks like this:
;;            (first (cons Y (list of anything))) -> Y  
;;
;;     The contract for the REST function looks like this:
;;        (rest (cons Y (list of anything))) -> (list of anything) 
;;

;; DEFINITION OF SELF-REFERENTIAL DATA TYPE LIST:
;;
;; In general, a list can be defined as being either:
;; 1. empty, or
;; 2. the result of (cons element existing_list)
;;
;; Since you need a list to create a list, you must start by consing
;; an element onto the empty list.
;;
;;
(check-expect (first (cons 8 empty)) 8) 
(check-expect (rest (cons 8 empty)) empty)  


;; a longer list is given a name using define, below:
(define listy (cons 8 (cons 7 (cons 6 empty))))

;; See Prof. Hunsberger's book posted on 2/11, Chapter 16,
;; pages 169 and 170 for a picture of listy

; Using the first and rest functions on constructed lists 
(check-expect (first listy) 8)
(check-expect (first (rest listy)) 7)
(check-expect (rest listy) (cons 7 (cons 6 empty)))
(check-expect (first (rest (rest listy))) 6)

;; Lists don't have to hold just one data type, e.g.:
(define multlisty (cons "bird" (cons 3 (cons true empty))))

(check-expect (first multlisty) "bird")
       

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Built-in functions that consume and/or produce lists (NOTE THAT EACH HAS
;; A STRING COUNTERPART EXCEPT FOR THE REVERSE FUNCTION):
;
;; CREATING A LIST (WITHOUT USING CONS EXPLICITLY):
;;
;; list      Contract: (list x ...) -> list (similar to string function)
;;           input:    x ... = any valid Racket type(s)
;;           output  Constructs a list of its arguments.
;;                      
;;           '(1 2 3) is equivalent to (list 1 2 3) ... but don't use '
;;            to make a list inside functions.  
;;           
;;           Every symbol inside a quoted list is treated like a quoted
;;           symbol and is not looked up in the GE or LE:
;;           
;;           '(a b c) is equivalent to (list 'a 'b 'c)
;;           '(1 2 3) numbers can't be quoted, so equivalent to (list 1 2 3)
;;           '("A" "B") strings can't be quoted, so equivalent to (list "A" "B")
;;

;; FINDING THE LENGTH OF A LIST:
;; 
;; length    Contract: (length listy) -> number           (like string-length)
;;           input:    listy is a list of anything, possibly empty
;;           output: returns the number of elements in listy.
;;
;;
;; CREATING A SINGLE LIST FROM SUBLISTS:
;;
;; append    Contract: (append list1 list2 ...) -> list     (like string-append)
;;           input:    list1,list2,...are lists of anything
;;           output:   Creates a single list from several lists.
;;                     Elements from lists are ordered left to 
;;                     right, in same order given. 
;;
;;
;; REVERSING A LIST:
;;
;; reverse   Contract: (reverse lst) -> list    ==> no string equivalent
;;           input:    lst is a list of anything
;;           output:   return lst with all elements reversed.

;; TYPE CHECKERS for empty lists: EMPTY? and NULL?
;;  
;; The empty? and null? functions check for the empty list, with the      
;; contract:
          (check-expect (empty? (cons 5 empty)) #f) ; -> boolean (#f--list not empty)
          (check-expect (null? '()) #t) ; -> boolean  (#t only for empty list)
;;

;; TYPE CHECKER for non-empty lists: CONS?
;; 
;; The cons? function checks for a non-empty list, with 
;; contract:
    (check-expect (cons? (cons 8 empty)) #t) ;-> boolean (#t only for non-empty list)
;;
;
;; TYPE CHECKER for any list: LIST?
;;
;; The list? function returns #t if its argument is either an empty or 
;; non-empty list.

   (check-expect (list? empty) #t)
   (check-expect (list? listy) #t)


;; Try typing the names my-list, new-list, and both-lists in the interactions 
;; window after pressing run.  
;;
;; These examples show that 
;;      1)cons is not a destructive operation and 
;;      2)append is not a destructive operation

(define my-list '(a b c))
(define new-list (cons 'x my-list))
(define both-lists (append my-list new-list))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Ex: Write a function that consumes a list of 4 numbers and produces the 
;     product of the 4 items.

;(prod-of-4 lon) -> number
;lon is a list of 4 numbers
;Outputs the product of all 4 numbers in lon

; PRE-FUNCTION TESTS:
(check-expect (prod-of-4 '(1 1 2 3)) 6)
(check-expect (prod-of-4 '(2 2 2 2)) 16)

; FUNCTION DEFINITION:
(define prod-of-4
 (lambda (lon)
   (* (first lon)
      (first (rest lon))
      (first (rest (rest lon)))
      (first (rest (rest (rest lon)))))))

;; THIS EXAMPLE IS MEANT TO MOTIVATE THE NEED FOR FUNCTIONS THAT CAN
;; CONSUME ANY SIZE OF LIST.  THERE MUST BE AN EASIER WAY!

;
; What happens if we wanted to do the same thing with a list of hundreds of
; elements?  This is what is meant when computer scientists talk about 
; "scalability".  This function does not work for lists longer than 4 so we
; say it's not scalable to larger input.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SELF-REFERENTIAL DATA DEFINITIONS: 
;
;   A list of numbers (LON) is either
;   1. empty, or
;   2. it is a non-empty list that was made using (cons n numlist), where 
;      n is a number and numlist is an LON one item smaller than 
;      (cons n numlist).
;  
;  You will see that, when using lists of arbitrary size, THE SHAPE OF 
;  FUNCTIONS THAT CONSUME A LIST MATCH THE SHAPE OF THE DATA DEFINITION. 


; Since lists may have any size, we need to develop a new type of function
; that can handle an arbitrary amount of data.  This type of function is
; called RECURSIVE.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NAIVE DEFINITION OF RECURSIVE FUNCTION:
;
;        A function is recursive if it calls itself. 
;
;                   ---------------
; 
; If we defined recursion using solely the definition above, we could write a 
; function like the following (definitely not a good idea):    
; 
; (define (rec-func x)
;   (rec-func x))            ;; NOT A TERMINATING RECURSIVE FUNCTION;
;                            ;; GOES INTO AN INFINITE LOOP. TRY IT.
;                            ;; BUT THEN STOP THE PROCESS.
;(rec-func 7)

;
; If you want a recursive function to terminate, you need to take the leftmost
; item off the list in each recursive call and call the function recursively
; on the rest of the list.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The general pattern of recursive functions:
; 
; *  The body of a recursive function contains a decision statement (e.g., cond).
;                     
; *  There is at least one base case, or stopping condition, to end the 
;    function execution. 
;    
; *  There is at least one recursive case, or repeating condition, in
;    which the function calls itself with a different argument that is
;    CLOSER TO THE BASE CASE than the current parameter value.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ex 1: Write a recursive function called appender that consumes a list of
;;       strings and outputs all strings appended as they appear in the list, 
;;       from left to right. (This is a poor example because string-append
;;       already does this.)

;; SELF-REFERENTIAL DATA DEFINITION FOR A LIST OF STRINGS:
;; A list of strings (LOS) is either:
;; 1. empty, or
;; 2. it's a (cons s los), where s is a string and los is an LOS

;; PRE-FUNCTION COMMENTS:
;; contract: (appender los) -> string
;; input:    los is a List of Strings
;; output:   append all strings in los to return a string

;; Example definitions of lists to use as test cases:
(define SLIST (list "log" "log" "log" "log" "log"))
(define GREETING (list "Hi " "how " "are " "you?"))

;; Pre-function tests: 
(check-expect (appender SLIST) "logloglogloglog")
(check-expect (appender empty) "") ;; always test the empty list!
(check-expect (appender GREETING) "Hi how are you?")
;
;; Function definition:
(define appender
  (lambda (los)
    (cond
      ;; base case, return empty string
      [(empty? los) ""]
      ;; recursive case, string-append the first string
      ;; in los onto a recursive call on the rest of los
      [else (string-append (first los)
                           (appender (rest los)))])))

;; Post-function tests:
(printf "  (appender SLIST) should be ~a and is ~a\n\n"
        "logloglogloglog"
        (appender SLIST))
(printf "  (appender GREETING) should be ~a and is ~a\n\n"
        "Hi how are you?"
        (appender GREETING))
(printf "  (appender empty) should be ~a and is ~a\n\n"
        ""
        (appender empty))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ex 2: Write a recursive function called double-add that consumes a list of
;;       numbers and outputs the result of doubling each number and then 
;;       adding all the doubled numbers in the list

;; Contract: (double-add lon) -> number
;; Input:    lon is a list of numbers
;; Output:   Produces a number, the sum of all numbers after each is 
;;           multiplied by 2

;; Function tests:
(check-expect (double-add (list 2 5 1 6 7)) 42)
(check-expect (double-add '(1 1 1 1 1)) 10)
(check-expect (double-add empty) 0)  ;; always test the base case

;; Function definition:
(define double-add
  (lambda (lon)
    (cond
      [(empty? lon) 0]
      [else (+ (* 2 (first lon)) (double-add (rest lon)))])))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ex 3: Write a recursive function called sum-squares that consumes a list of
;;       numbers and outputs the result of squaring each number and then 
;;       adding all the squared numbers in the list

;; Contract: (sum-squares lon) -> number
;; Input:    lon is a list of numbers
;; Output:   Produces a number, the sum of all numbers after each is 
;;           squared

;; Helper function:
(define sqr
  (lambda (x) (* x x)))

;; Function tests:
(check-expect (sum-squares (list 2 5 1 6 7)) 115)
(check-expect (sum-squares '(1 1 1 1 1)) 5)
(check-expect (sum-squares empty) 0)  ;; always test the base case

;; Function definition:
(define sum-squares
  (lambda (lon)
    (cond
      [(empty? lon) 0]
      [else (+ (sqr (first lon)) (sum-squares (rest lon)))])))



;;;;;;;;;;;;;;;RECURSIVE FUNCTION WITH TWO RECURSIVE CALLS;;;;;;;;;;;;;;;;;;;;;;
;;
;; Ex 4: Write a function called add-even that consumes a list of
;;       numbers and returns the sum of the even numbers. 
;;
;;       This example is different than the ones we've seen because it 
;;       requires more than one recursive case: one for even numbers
;;       and another for odd numbers.
;;       

;; A list of numbers (LON) is either:
;; 1. empty, or
;; 2. it's a (cons n list-of-nums), where n is a number and list-of-nums is
;;    an LON.

;; Contract: (add-even lon) -> number
;; Input:    lon is a list of numbers
;; Output:   Produces a number, the sum of all even numbers in lon 

;; Pre-function tests: 
(check-expect (add-even (list 2 3 6 7 11)) 8)
(check-expect (add-even (list 20 21 1)) 20) 
(check-expect (add-even (list 1 3 5 7)) 0)
(check-expect (add-even empty) 0)             ;; ALWAYS test the empty list

;; Function definition:
(define add-even
  (lambda (lon)
    (cond
      [(empty? lon) 0]
      [else
       (if (even? (first lon))
           (+ (first lon) (add-even (rest lon)))
           (add-even (rest lon)))])))




;;;;;;;;;;;;;;;;;;;;;;;;;LIST PRODUCING FUNCTION;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Ex 5: Write a function called even-t-odd-f that consumes a list of positive
;;       integers of any size and produces a list containing true for every 
;;       even integer on the list and false for every odd integer.

;;PRE-FUNCTION COMMENTS:
;;  Contract:  (even-t-odd-f nos) -> list of booleans
;;  Input:     nos:list of positive integers
;;  Output:    Produce the list containing #t for every even integer
;;             in nos and #f for every odd number.

;; Pre-function tests:
(check-expect (even-t-odd-f (list 1 2 3 4 5 6)) (list #f #t #f #t #f #t))
(check-expect (even-t-odd-f (list 1111 1113 5 9 2)) (list #f #f #f #f #t))  
(check-expect (even-t-odd-f empty) empty)
;
;; Function definition:
(define (even-t-odd-f nos)
  (cond
    [(empty? nos) '()]
    [(even? (first nos)) (cons #t (even-t-odd-f (rest nos)))]
    [else (cons #f (even-t-odd-f (rest nos)))]))
;
;
;
; NEXT TOPIC: RECURSION OVER THE NATURAL NUMBERS (Chapters 12 and 14) 

(newline)(newline)
(test)
