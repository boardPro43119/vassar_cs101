;; CS101 Lecture Notes     
;; Spring 2019             
;; February 18

;; This line needed if using Swindle to access library containing
;; check-expects.  Also requires call to 0-parameter test function
;; at bottom of file.
(require test-engine/racket-tests)

;; Examples to work on in-class:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 1: (changes a list to another list of same length)
;;
;; Write a function called CUBE-ALL that consumes a list of numbers
;; and produces a list of the same size with every number cubed.

;; Contract: (cube-all lon) -> list of numbers
;; Input:    lon is a list of numbers
;; Output:   a list of numbers with all items in lon cubed
;;
;;-----------------Helper function-----------------------
;;       contract: (cube x) -> number
;;       input:    x is a number
;;       output:   x raised to the 3rd power
;;
;(check-expect (cube-all 2) 8)
;(check-expect (cube-all 3) 27)
;(check-expect (cube-all 0) 0)

;(define cube
;  (lambda (x)
;    (* x x x)))
;--------------------------------------------------------
;(define cube-all
;  (lambda (lon)



;; Post function tests:
;(printf "(cube-all '(1 2 3 4)) should be ~a and is ~a"
;        '(1 8 27 256)
;        (cube-all '(1 2 3 4)))
;(printf "(cube-all '(0)) should be ~a and is ~a"
;        '(0)
;        (cube-all '(0)))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 2: (changes a list to another list of same length)
;;
;; Write a function called LENGTHS that consumes a list of strings
;; and produces a list of numbers of the same length that is the
;; string-length of every string in the input list.

;; What function can we use to get the number of chars in a string?

;; Contract: (lengths los) -> list of numbers
;; Input:    los is a list of strings
;; Output:   a list of numbers, the length of each string in los

;(check-expect (lengths '("harvey" "and" "Hugo" "went" "skiing")) '(6 3 4 4 6))
;(check-expect (lengths '("O" "I" "C" "U" "R" "M" "T")) '(1 1 1 1 1 1 1))
;(check-expect (lengths '()) '())

;(define lengths
;  (lambda (los)


;; Post function tests:
;(printf "(lengths '(\"Hi\" \"my\" \"name\" \"is\" \"Kay\"))
;        should be ~a and is ~a"
;        '(2 2 4 2 3)
;        (lengths '(\"Hi\" \"my\" \"name\" \"is\" \"Kay\")))
;(printf "(lengths '(\"a\" \"e\" \"i\" \"o\" \"u\"))
;        should be ~a and is ~a"
;        '(1 1 1 1 1)
;        (lengths '(\"a\" \"e\" \"i\" \"o\" \"u\")))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 3: (consumes a list and returns another list of <= same length)
;;
;; write a function called FILTER-NUMS that consumes a list of
;; any type of data and produces a list of only the numbers in the
;; input list.

;; Contract: (filter-nums loa) -> list of numbers
;; Input:    loa is a list of any valid scheme data types
;; Output:   a list of numbers present in loa

;(define filter-nums
;  (lambda (loa)




;; Post function tests:
;(printf "(filter-nums '(1 b 2 a 3 4)) should be ~a and is ~a"
;        '(1 2 3 4)
;        (filter-nums '(1 b 2 a 3 4)))
;(printf "(filter-nums '(a)) should be ~a and is ~a"
;        '()
;        (cube-all '(a)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 4: (predicate function for lists)
;;
;; Write a function called INCREASING? that consumes a list of
;; numbers and returns #t only if the list of numbers is
;; increasing from left to right.

;; Contract: (increasing? lon) -> boolean
;; Input:    lon is a list of numbers
;; Output:   boolean, #t if numbers are strictly increasing from left to right
;;           #f otherwise.\n\n")

;(check-expect (increasing? (list 1 3 5 7 9)) #t)
;(check-expect (increasing? '()) #f)
;(check-expect (increasing? '(1)) #f)
;(check-expect (increasing? '(1 3 3 7 9)) #f)

;(define increasing?
;  (lambda (lon)



           
;; Post function tests:
;(printf "(increasing? '(1 2 4 3)) should be ~a and is ~a"
;        #f
;        (increasing? '(1 2 4 3)))
;(printf "(increasing? '(1)) should be ~a and is ~a"
;        '(1)
;        (increasing? '(1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The random function:
;;    Example:  (random 5) produces a random number between 0 and 4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NUMERIC RECURSION 
;;
;; Since there is a stopping condition in the set of natural numbers, when
;; x = 0 for example, we can do recursion over natural numbers. I may or may 
;; not have shown you the recursive version of the factorial function last
;; week.
;;
;; Mathematical definition of n!, where n is a natural number:
;;
;; 0! = 1
;; 1! = 1
;; n! = n * (n - 1)!
;;
;; This is a self-referential definition, because n! is defined as being
;; composed of a smaller version of itself.

(display "
Contract: (fact n) -> number
Input:    n is a natural number
Output:   n!, a number \n\n")

;(check-expect (fact 1) 1)
;(check-expect (fact 3) 6)
;(check-expect (fact 5) 120)
;(check-expect (fact 0) 1)





;; Printing function results:
;(printf "(fact 0) should be ~a and is ~a\n"
;        1
;        (fact 0))
;(printf "(fact 1) should be ~a and is ~a\n"
;        1
;        (fact 1))
;(printf "(fact 4) should be ~a and is ~a\n"
;        24
;        (fact 4))
;(printf "(fact 5) should be ~a and is ~a\n"
;        120
;        (fact 5))


;; When using the HtDP languages, there can be only 1 expression
;; in the return part of the function. The begin special form
;; is needed to do both side-effect printing and returning a value.
;; Only the last expression is returned and the rest should be side-
;; effects.
;;
;; In swindle, there can be any number of expressions in the
;; return part of a function, but only the last expression is
;; returned. No begin is needed.

(display "
Contract: (factp n) -> number
Input:    n is a natural number
Output:   n!, a number
Side-effect: Printing to the display\n\n")

;(check-expect (factp 1) 1)
;(check-expect (factp 3) 6)
;(check-expect (factp 5) 120)
;(check-expect (factp 0) 1)





;; Printing function also not possible due to void return.
;(printf "(factp 9) should be ~a and is ~a\n"
;362880
;(factp 9))
;(printf "(factp 8) should be ~a and is ~a\n"
;40320
;(factp 8))
;(printf "(factp 5) should be ~a and is ~a\n"
;120
;(factp 5))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Many mathematical functions are defined using self-referential
;; definitions. For example, the summation function calculates the
;; sum of nat numbers from 1 to n.

;; summation(1) = 1
;; summation(n) = summation(n-1) + n

;(check-expect (summation 5) 15)
;(check-expect (summation 0) 0)
;(check-expect (summation 1) 1)

(display "
Contract: (summation n) -> natural number
Input:    n is a natural number
Output:   a natural number, the sum of numbers 1...n.\n\n")



;; Function printfs:
;(printf "(summation 5) should be ~a and is ~a\n"
;        15
;        (summation 5))
;(printf "(summation 7) should be ~a and is ~a\n"
;        28
;        (summation 7))
;(printf "(summation 1) should be ~a and is ~a\n\n"
;        1
;        (summation 1))

;; Other examples include the geometric sum, the Nth harmonic
;; number, and many others.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Write a function that side-effect prints a line of n stars.

(display "
Contract: (n-chars n) --> none
Input:    n, a natural number
Output:   none
Side-effect: printing to the interactions window\n")






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A problem description that refers to any arbitrarily large
;; sequence of operations on a natural number is a candidate for
;; numeric recursion.
(newline)(newline)
(test)





