#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 614 0 17 3 21 #";; CS101, Spring 2019"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Wednesday, February 27"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 24 #"test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Reminder: First exam on Monday, March 4th, at"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; 3:10 pm.  You will have 2 hours to complete the"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; exam."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; You can bring one piece of letter paper with notes on both"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; sides (with print as small as you like) to the exam. "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Homework 3 is due on Thursday night.  Please let me know if"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; you are having problems."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; Today:"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;     - more examples of tail-recursion and using the"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;       local special form."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Accumulator functions:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; An ACCUMULATOR is an extra input parameter used to contain the"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; result of an incremental computation.     "
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Accumulators allow you to write recursive functions "
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; in tail-recursive fashion. We only need to introduce an"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; additional parameter to the function definition to contain the"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; accumulated value. This technique is like iteration in other"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; languages."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; "
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Differences between calling an accumulator-style function"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; and calling its non-accumulator counterpart:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";   1. The base case value is passed into the function as the "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";      *inital value* of the accumulator."
0 0 24 29 1 #"\n"
0 0 17 3 7 #";      "
0 0 24 29 1 #"\n"
0 0 17 3 57 #";   2. The value returned in the base case clause is the "
0 0 24 29 1 #"\n"
0 0 17 3 37 #";      *accumulator* parameter value."
0 0 24 29 1 #"\n"
0 0 17 3 7 #";      "
0 0 24 29 1 #"\n"
0 0 17 3 55 #";   3. The recursive case performs its operation on the"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";      accumulator value and passes the accumulator as an"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";      argument in the recursive call."
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Write a function called DELETE-X that takes x, a value of a"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; valid data type and la, a list of valid data types, and"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; returns the list without any occurrences of x."
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; NON-TAIL-RECURSIVE VERSION"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 45 #"Contract: (delete-x x la) -> list of anything"
0 0 19 29 1 #"\n"
0 0 19 3 58
#"Input:    x is any data value and la is a list of anything"
0 0 19 29 1 #"\n"
0 0 19 3 62
#"Output:   a LIST of anything, missing all occurrences of x.\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Pre-function tests:"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";(check-expect (delete-x 3 '(a 4 3 5)) '(a 4 5))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(check-expect (delete-x 3 '()) '())"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";(check-expect (delete-x 'a '(a b c a a)) '(b c))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Function tests:"
0 0 19 29 1 #"\n"
0 0 19 3 47 #"(check-expect (delete-x 3 '(a 4 3 5)) '(a 4 5))"
0 0 19 29 1 #"\n"
0 0 19 3 35 #"(check-expect (delete-x 3 '()) '())"
0 0 19 29 1 #"\n"
0 0 19 3 53 #"(check-expect (delete-x 'a '(a b c a a)) '(b c))\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Function definition:"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define (delete-x x la)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Function definition:"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;;Post-function tests:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";(printf \"(delete-x 4 '(8 4 5 3 2 4 1)) should be ~a and is ~a\\n\\"
 #"n\""
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";        '(8 5 3 2 1) "
0 0 24 29 1 #"\n"
0 0 17 3 39 #";        (delete-x 4 '(8 4 5 3 2 4 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";(printf \"(delete-x 4 '()) should be ~a and is ~a\\n\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 13 #";        '() "
0 0 24 29 1 #"\n"
0 0 17 3 26 #";        (delete-x 4 '()))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";(printf \"(delete-x 4 '(a b c d e)) should be ~a and is ~a\\n\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 22 #";        '(a b c d e) "
0 0 24 29 1 #"\n"
0 0 17 3 35 #";        (delete-x 4 '(a b c d e)))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Write a function called DELETE-x that takes x, a value of a"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; valid data type and la, a list of valid data types, and"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; returns the list without any occurrences of x."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; TAIL-RECURSIVE ACCUMULATOR VERSION"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 49 #"Contract: (delete-x-rec x la) -> list of anything"
0 0 19 29 1 #"\n"
0 0 19 3 58
#"Input:    x is any data value and la is a list of anything"
0 0 19 29 1 #"\n"
0 0 19 3 62
#"Output:   a LIST of anything, missing all occurrences of x.\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Pre-function tests:"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";(check-expect (delete-x-rec 3 '(a 4 3 5)) '(a 4 5))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(check-expect (delete-x-rec 3 '()) '())"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";(check-expect (delete-x-rec 'a '(a b c a a)) '(b c))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"\\n\\nFunction tests:"
0 0 19 29 1 #"\n"
0 0 19 3 51 #"(check-expect (delete-x-rec 3 '(a 4 3 5)) '(a 4 5))"
0 0 19 29 1 #"\n"
0 0 19 3 39 #"(check-expect (delete-x-rec 3 '()) '())"
0 0 19 29 1 #"\n"
0 0 19 3 57
#"(check-expect (delete-x-rec 'a '(a b c a a)) '(b c))\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Function definition:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define (delete-x-rec x la)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; NOTE: A PROBLEM WITH USING TAIL RECURSION TO CONSTRUCT"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; A LIST IS THAT THE ITEMS ARE PUT ON THE ACC IN REVERSE"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; ORDER. WE WILL LOOK AT TECHNIQUES TO ENSURE THE RETURNED"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; LIST IS IN THE CORRECT ORDER. "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Function definition:"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;;Post-function tests:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";(printf \"(delete-x-rec 4 '(8 4 5"
 #" 3 2 4 1)) should be ~a and is ~a\\n\\n\""
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";        '(8 5 3 2 1) "
0 0 24 29 1 #"\n"
0 0 17 3 43 #";        (delete-x-rec 4 '(8 4 5 3 2 4 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";(printf \"(delete-x 4 '()) should be ~a and is ~a\\n\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 13 #";        '() "
0 0 24 29 1 #"\n"
0 0 17 3 30 #";        (delete-x-rec 4 '()))"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";(printf \"(delete-x-rec 4 '(a b c d e)) should be ~a and is ~a\\n\\"
 #"n\""
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";        '(a b c d e) "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";        (delete-x-rec 4 '(a b c d e)))  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; Write a Scheme procedure called \"list-between\" using regular"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; and tail recursion."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";; This procedure will take as in"
 #"put a list of numbers called \"lst\"."
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";; It will also take as input two particular numbers called \"low\""
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; and \"high\". The procedure will return a list of all the numbers"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; in lst that are greater than or equal to low and less than or"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; equal to high. The order of the members of the returned list does"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; not matter; however, each number appearing on the returned list"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; should appear the same number of times as it occurs in the input"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; list. "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Examples of running this function in the interactions window:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; > (list-between '() 7 9)                     ==> ()"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; > (list-between '(1 2 3 4 5 6 7 8 9) 4 7)    ==> (4 5 6 7)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; > (list-between '(3 1 9 7 4 2 2) 2 6)        ==> (3 4 2 2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; a. Write one version of this procedure using regular recursion."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 55 #"Contract: (list-between lst low hgh) -> list of numbers"
0 0 19 29 1 #"\n"
0 0 19 3 63
#"Input:    lst is a list of numbers and low and high are numbers"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"          such that low <= high"
0 0 19 29 1 #"\n"
0 0 19 3 30 #"Output:   list of numbers\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(check-expect (list-between '() 7 9) '())"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";(check-expect (list-between '(1 2 3 4 5 6 7 8 9) 4 7) '(4 5 6 7))"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";(check-expect (list-between '(3 1 9 7 4 2 2) 2 6) '(3 4 2 2))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Function tests:"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"(check-expect (list-between '() 7 9) '())"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"(check-expect (list-between '(1 2 3 4 "
0 0 19 3 28 #"5 6 7 8 9) 4 7) ' (4 5 6 7))"
0 0 19 29 1 #"\n"
0 0 19 3 66
(
 #"(check-expect (list-between '(3 1"
 #" 9 7 4 2 2) 2 6) '(3 4 2 2))\\n\\n\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(define (list-between lst low hgh)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Function definition:"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";(printf \"(list-between '() 7 9) should be ~a and is ~a\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 14 #";        empty"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";        (list-between '() 7 9))"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";(printf \"(list-between '(1 2 3 4 5 6 7 8 9) 4 7) should be ~a and "
 #"is ~a\\n\""
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";        '(4 5 6 7)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";        (list-between '(1 2 3 4 5 6 7 8 9) 4 7))"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";(printf \"(list-between '(3 1 9 7 4 2 2) 2 6) should be ~a and is ~"
 #"a\\n\\n\""
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";        '(3 4 2 2)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";        (list-between '(3 1 9 7 4 2 2) 2 6))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; b. Write another version using local, tail recursion, and an accum"
 #"ulator"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 58
#"Contract: (list-between-v2 lst low hgh) -> list of numbers"
0 0 19 29 1 #"\n"
0 0 19 3 52 #"Input:    lst is a list of numbers and low and high "
0 0 19 3 11 #"are numbers"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"          such that low <= high"
0 0 19 29 1 #"\n"
0 0 19 3 30 #"Output:   list of numbers\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(check-expect (list-between-v2 '() 7 9) '())"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";(check-expect (list-between-v2 '(1 2 3 4 5 6 7 8 9) 4 7) '(4 5 6 7)"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";(check-expect (list-between-v2 '(3 1 9 7 4 2 2) 2 6) '(3 4 2 2))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Function tests:"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"(check-expect (list-between-v2 '() 7 9) '())"
0 0 19 29 1 #"\n"
0 0 19 3 69
(
 #"(check-expect (list-between-v2 '(1 2 3 4 5 6 7 8 9) 4 7) ' (4 5 6 7)"
 #")"
) 0 0 19 29 1 #"\n"
0 0 19 3 69
(
 #"(check-expect (list-between-v2 '("
 #"3 1 9 7 4 2 2) 2 6) '(3 4 2 2))\\n\\n\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(define (list-between-v2 lst low hgh)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Function definition:"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";(printf \"(list-between-v2 '() 7 9) should be ~a and is ~a\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 14 #";        empty"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";        (list-between-v2 '() 7 9))"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";(printf \"(list-between-v2 '(1 2 3 4 5 6 7 8 9) 4 7) should be ~a a"
 #"nd is ~a\\n\""
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";        '(4 5 6 7)"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";        (list-between-v2 '(1 2 3 4 5 6 7 8 9) 4 7))"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(printf \"(list-between-v2 '(3 1 9 7 4 2 2) 2 6) should be ~a and i"
 #"s ~a\\n\\n\""
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";        '(3 4 2 2)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";        (list-between-v2 '(3 1 9 7 4 2 2) 2 6))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; USING THE RANDOM FUNCTION TO WRITE NON-DETERMINISTIC"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; PROGRAMS "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; Up until now, we have been writing what are known as \"determinis"
 #"tic\""
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; programs. This means that the output can be precisely predicted"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; based on the value of the input."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; The random function allows us to write \"non-deterministic\" prog"
 #"rams."
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#";; In this type of program, we cannot always predict the output due"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; to the factor of chance introduced by the random function."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Write a function that returns the value created by tossing"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; a single n-sided die."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 61
#"Contract: (roll-n-sided n) --> natural number between 1 and n"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"Input:    n is a natura"
0 0 19 3 8 #"l number"
0 0 19 29 1 #"\n"
0 0 19 3 51 #"Output:   a number between 1 and n, inclusive.\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; No check-expects possible due to random nature of return value."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"roll-n-sided"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";(printf \"The return value of (roll-n-sided 6) is : ~a\\n\\n\""
0 0 24 29 1 #"\n"
0 0 17 3 26 #";        (roll-n-sided 6))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; Use the random function to simulate n tosses of a 6-sided die."
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; The function should return each of the values rolled in a list."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; NOTE: I could have used roll-n-sided as a helper function below"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; but I chose not to."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(display \""
0 0 24 29 1 #"\n"
0 0 17 3 44 #";Contract: (n-toss-6 n) --> list of numbers "
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Input:    n, a natural number"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";Output:   a list of numbers between 1 and 6\\n\\n\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";(display \"No tests possible due to random function use.\\n\\n\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(define (n-toss-6 n)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Function definition:"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"\\n\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(printf \"(n-toss-6 20) ==> \")"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(n-toss-6 20)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(printf \"(n-toss-6 11) ==> \")"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(n-toss-6 11)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(printf \"(n-toss-6 0) ==> \")"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(n-toss-6 0)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0           0
