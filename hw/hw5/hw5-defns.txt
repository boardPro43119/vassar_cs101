;; CMPU101 Spring 2019
;; Assignment 5
;; Posted April 3rd
;; Due: April 10th, at 5 pm

;; USING HIGHER ORDER FUNCTIONS
(require test-engine/racket-tests)

;; You should use a higher-order function in your solution to each problem.
;; This does not mean that you can't also use explicit recursion for
;; some of the problems.

(display "
-----------------------------------
Assignment 5, Spring 2019
CS101-53 
Benjamin Prud'homme
-----------------------------------\n")

;; PROBLEM 1:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Define a function, called all-numbers?, that satisfies the following contract:
(display "
       ;;  Contract:  (all-numbers? listy) -> boolean
       ;; -----------------------------------------------------------
       ;;  INPUT:   LISTY, a list
       ;;  OUTPUT:  #t (or something that counts as true) if all the
       ;;           items in LISTY are numbers; #f otherwise
\n\n")

;; Use a higher order function such as map, apply, filter, etc., in your 
;; solution instead of using explicit recursion.
;;
;; Here are some examples of running all-numbers?:
;;       > (all-numbers? '(1 2 3 4))
;;       #t
;;       > (all-numbers? '(1 2 a b #t c 4))
;;       #f
;;       > (all-numbers? '())
;;       #f

;; Write at least 3 check-expects here:
(check-expect (all-numbers? '(1 2 3 4)) #t)
(check-expect (all-numbers? '(1 2 a b #t c 4)) #f)
(check-expect (all-numbers? '()) #f)

;; Display your check-expects here:
(display "
;; Function tests:
(check-expect (all-numbers? '(1 2 3 4)) #t)
(check-expect (all-numbers? '(1 2 a b #t c 4)) #f)
(check-expect (all-numbers? '()) #f)
\n\n")

;; Function definition:
(define all-numbers?
  (lambda (listy)
    ;; Return true if the list is nonempty and contains only numbers;
    ;; false otherwise
    (and (not (empty? listy)) (andmap number? listy))))

(display "
;; Function definition:
(define all-numbers?
  (lambda (listy)
    ;; Return true if the list is nonempty and contains only numbers;
    ;; false otherwise
    (and (not (empty? listy)) (andmap number? listy))))
\n\n")

;; Write printf statements to show tests on function below
(printf "(all-numbers? '(1 2 3 4)) should be #t and is ~a\n"
        (all-numbers? '(1 2 3 4)))
(printf "(all-numbers? '(1 2 a b #t c 4)) should be #f and is ~a\n"
        (all-numbers? '(1 2 a b #t c 4)))
(printf "(all-numbers? '()) should be #f and is ~a\n"
        (all-numbers? '()))

;; PROBLEM 2:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Define a function, called any-numbers?, that satisfies the following contract:

(display "
       ;;  Contract:  (any-numbers? listy) -> boolean
       ;; -----------------------------------------------------------------
       ;;  INPUT:   LISTY, a list
       ;;  OUTPUT:  #t (or something that counts as true) if any of the
       ;;           items in LISTY are numbers; #f otherwise
\n\n")

;; Use a higher order function such as map, filter, etc., in your solution
;; instead of using explicit recursion.
;;
;; Here are some examples of running any-numbers?:
;;       > (any-numbers? '(1 2 3 4))
;;       #t
;;       > (any-numbers? '(1 2 a b #t c 4))
;;       #t
;;       > (any-numbers? '())
;;       #f

;; Write at least 3 check-expects here:
(check-expect (any-numbers? '(1 2 3 4)) #t)
(check-expect (any-numbers? '(1 2 a b #t c 4)) #t)
(check-expect (any-numbers? '()) #f)

;; Display your check-expects here:
(display "
;; Function tests:
(check-expect (any-numbers? '(1 2 3 4)) #t)
(check-expect (any-numbers? '(1 2 a b #t c 4)) #t)
(check-expect (any-numbers? '()) #f)
\n\n")

;; Function definition:
(define any-numbers?
  (lambda (listy)
    ;; Return true if the list is nonempty and contains any numbers;
    ;; false otherwise
    (and (not (empty? listy)) (ormap number? listy))))

(display "
;; Function definition:
(define any-numbers?
  (lambda (listy)
    ;; Return true if the list is nonempty and contains any numbers;
    ;; false otherwise
    (and (not (empty? listy)) (ormap number? listy))))
\n\n")

;; Write printf statements to show tests on function below
(printf "(any-numbers? '(1 2 3 4)) should be #t and is ~a\n"
        (any-numbers? '(1 2 3 4)))
(printf "(any-numbers? '(1 2 a b #t c 4)) should be #t and is ~a\n"
        (any-numbers? '(1 2 a b #t c 4)))
(printf "(any-numbers? '()) should be #f and is ~a\n"
        (any-numbers? '()))

;; PROBLEM 3:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define a function, called 1st-symbol, that satisfies the following contract:

(display "
    ;; Contract: (1st-symbol loa) -> symbol or #f
    ;; ---------------------------------------------------
    ;;  INPUT:   LOA, list of any valid types
    ;;  OUTPUT:  The first symbol that appears in LISTY;
    ;;           or #f, if no symbols appear in LISTY.
\n\n")

;;
;; Here are some examples of running 1st-symbol:
;;  > (1st-symbol '(3 #t x y #f))
;;  x
;;  > (1st-symbol '(1 2 3))
;;  #f
;;  > (1st-symbol '(1 2 3 aa bb cc uu))
;;  aa

;; Use a higher order function such as map, filter, etc., in your solution
;; instead of using explicit recursion.
;;

;; Write at least 3 check-expects here:
(check-expect (1st-symbol '(3 #t x y #f)) 'x)
(check-expect (1st-symbol '(1 2 3)) #f)
(check-expect (1st-symbol '(1 2 3 aa bb cc uu)) 'aa)

;; Display your check-expects here:
(display "
;; Function tests:
(check-expect (1st-symbol '(3 #t x y #f)) 'x)
(check-expect (1st-symbol '(1 2 3)) #f)
(check-expect (1st-symbol ('1 2 3 aa bb cc uu)) 'aa)
\n\n")

;; Function definition:
(define 1st-symbol
  (lambda (loa)
    (let
        ;; Store all of loa's symbols in a separate list
        ((los (filter symbol? loa)))
      (cond
        ;; If no symbols were found, return false
        [(empty? los) #f]
        ;; Otherwise, return the first symbol
        [else (first los)]))))

(display "
;; Function definition:
(define 1st-symbol
  (lambda (loa)
    (let
        ;; Store all of loa's symbols in a separate list
        ((los (filter symbol? loa)))
      (cond
        ;; If no symbols were found, return false
        [(empty? los) #f]
        ;; Otherwise, return the first symbol
        [else (first los)]))))
\n\n")

;; Write printf statements to show tests on function below
(printf "(1st-symbol '(3 #t x y #f)) should be x and is ~a\n"
        (1st-symbol '(3 #t x y #f)))
(printf "(1st-symbol '(1 2 3)) should be #f and is ~a\n"
        (1st-symbol '(1 2 3)))
(printf "(1st-symbol '(1 2 3 aa bb cc uu)) should be aa and is ~a\n"
        (1st-symbol '(1 2 3 aa bb cc uu)))

;; PROBLEM 4:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define a function, called last-symbol, that satisfies the following contract:

(display "
    ;; Contract: (last-symbol loa) -> symbol or #f
    ;; ---------------------------------------------------
    ;;  INPUT:   LOA, list of any valid types
    ;;  OUTPUT:  The last symbol that appears in LISTY;
    ;;           or #f, if no symbols appear in LISTY.
\n\n")

;;
;; Here are some examples of running last-symbol:
;;  > (last-symbol '(3 #t x y #f))
;;  x
;;  > (last-symbol '(1 2 3))
;;  #f

;; Use a higher order function such as map, filter, etc., in your solution
;; instead of using explicit recursion.
;;


;; Write at least 3 check-expects here:
(check-expect (last-symbol '(3 #t x y #f)) 'y)
(check-expect (last-symbol '(1 2 3)) #f)
(check-expect (last-symbol '(1 2 3 aa bb cc uu)) 'uu)

;; Display your check-expects here:
(display "
;; Function tests:
(check-expect (last-symbol '(3 #t x y #f)) 'y)
(check-expect (last-symbol '(1 2 3)) #f)
(check-expect (last-symbol '(1 2 3 aa bb cc uu)) 'uu)
\n\n")

;; Function definition:
(define last-symbol
  (lambda (loa)
    (let
        ;; Store all of loa's symbols in a separate list
        ((los (filter symbol? loa)))
      (cond
        ;; If no symbols were found, return false
        [(empty? los) #f]
        ;; Otherwise, return the last symbol
        [else (first (reverse los))]))))

(display "
;; Function definition:
(define last-symbol
  (lambda (loa)
    (let
        ;; Store all of loa's symbols in a separate list
        ((los (filter symbol? loa)))
      (cond
        ;; If no symbols were found, return false
        [(empty? los) #f]
        ;; Otherwise, return the last symbol
        [else (first (reverse los))]))))
\n\n")

;; Write printf statements to show tests on function below
(printf "(last-symbol '(3 #t x y #f)) should be y and is ~a\n"
        (last-symbol '(3 #t x y #f)))
(printf "(last-symbol '(1 2 3)) should be #f and is ~a\n"
        (last-symbol '(1 2 3)))
(printf "(last-symbol '(1 2 3 aa bb cc uu)) should be uu and is ~a\n"
        (last-symbol '(1 2 3 aa bb cc uu)))


;; PROBLEM 5:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define a function, called dotties, that satisfies the following contract:

(display "
    ;; Contract: (dotties listy listz) -> number
    ;; ----------------------------------------------------------------
    ;;  INPUT:  LISTY, LISTZ, two lists of numbers, having
    ;;            the same length
    ;;  OUTPUT:  The \"dot product\" of LISTY and LISTZ.  In other
    ;;    words, if LISTY = (y1 y2 ... yn) and LISTZ = (z1 z2 ... zn),
    ;;    then the output is the sum:  y1*z1 + y2*z2 + ... + yn*zn.
\n\n")

;; Here are some examples of running dotties:
;;    > (dotties '(5 4 3) '(100 10 1))
;;    543                                   ;;(5*100)+(4*10)+(3*1)
;;    > (dotties '(2 4) '(9 7))
;;    46                                    ;;(2*9)+(4*7)
;;    > (dotties '(1 -2 1) '(2 3 4))
;;    0                                     ;;(1*2)+(-2*3)+(1*4)

;;
;; Use a higher order function such as map, apply, etc., in your solution
;; instead of using explicit recursion.


;; Write at least 3 check-expects here:
(check-expect (dotties '(5 4 3) '(100 10 1)) 543)
(check-expect (dotties '(2 4) '(9 7)) 46)
(check-expect (dotties '(1 -2 1) '(2 3 4)) 0)

;; Display your check-expects here:
(display "
;; Function tests:
(check-expect (dotties '(5 4 3) '(100 10 1)) 543)
(check-expect (dotties '(2 4) '(9 7)) 46)
(check-expect (dotties '(1 -2 1) '(2 3 4)) 0)
\n\n")


;; Function definition:
(define dotties
  (lambda (listy listz)
    ;; Compute the sum of the products of corresponding elements of listy and
    ;; listz
    (apply + (map * listy listz))))

(display "
;; Function definition:
(define dotties
  (lambda (listy listz)
    ;; Compute the sum of the products of corresponding elements of listy and
    ;; listz
    (apply + (map * listy listz))))
\n\n")

;; Write printf statements to show tests on function below
(printf "(dotties '(5 4 3) '(100 10 1)) should be 543 and is ~a\n"
        (dotties '(5 4 3) '(100 10 1)))
(printf "(dotties '(2 4) '(9 7)) should be 46 and is ~a\n"
        (dotties '(2 4) '(9 7)))
(printf "(dotties '(1 -2 1) '(2 3 4)) should be 0 and is ~a\n"
        (dotties '(1 -2 1) '(2 3 4)))

;; PROBLEM 6:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define a function, called remove-if, that satisfies the following contract:

(display "
    ;;  Contract (remove-if pred listy) -> list of inputs suitable for pred
    ;; ---------------------------------------------------------------------
    ;;  INPUTS:  PRED, a predicate that expects one input
    ;;           LISTY, a list of elements, each of which is a
    ;;           suitable input for PRED
    ;;  OUTPUT:  A list that contains all of the elements of LISTY,
    ;;           except those for which PRED returns #t.
\n\n")
;;
;; Here are some examples:
;;    > (remove-if even? '(1 2 3 4 5 6))
;;    (1 3 5)
;;    > (remove-if odd? '(1 2 3 4 5 6))
;;    (2 4 6)
;;
;; Use a higher order function such as map, filter, etc., in your solution
;; instead of using explicit recursion.

;; Write at least 3 check-expects here:
(check-expect (remove-if even? '(1 2 3 4 5 6)) '(1 3 5))
(check-expect (remove-if odd? '(1 2 3 4 5 6)) '(2 4 6))
(check-expect (remove-if symbol? '(1 s 3 g b 5)) '(1 3 5))
(check-expect (remove-if symbol? '(a 1)) '(1))

;; Display your check-expects here:
(display "
(check-expect (remove-if even? '(1 2 3 4 5 6)) '(1 3 5))
(check-expect (remove-if odd? '(1 2 3 4 5 6)) '(2 4 6))
(check-expect (remove-if symbol? '(1 s 3 g b 5)) '(1 3 5))
(check-expect (remove-if symbol? '(a 1)) '(1))
\n\n")

;; Function definition:
(define remove-if
  (lambda (pred listy)
    (let
        ;; Define a new predicate function that returns the opposite of pred
        ((not-pred (lambda (le) (not (pred le)))))
      ;; Remove the elements that fail pred
      (filter not-pred listy))))

(display "
;; Function definition:
(define remove-if
  (lambda (pred listy)
    (let
        ;; Define a new predicate function that returns the opposite of pred
        ((not-pred (lambda (le) (not (pred le)))))
      ;; Remove the elements that fail pred
      (filter not-pred listy))))
\n\n")

;; Write printf statements to show tests on function below
(printf "(remove-if even? '(1 2 3 4 5 6)) should be '(1 3 5) and is ~a\n"
        (remove-if even? '(1 2 3 4 5 6)))
(printf "(remove-if odd? '(1 2 3 4 5 6)) should be '(2 4 6) and is ~a\n"
        (remove-if odd? '(1 2 3 4 5 6)))
(printf "(remove-if symbol? '(1 s 3 g b 5)) should be '(1 3 5) and is ~a\n"
        (remove-if symbol? '(1 s 3 g b 5)))
(printf "(remove-if symbol? '(a 1)) should be '(1) and is ~a\n"
        (remove-if symbol? '(a 1)))

;; PROBLEM 7:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define a function, called EVERY-OTHER-ONE, that satisfies the following
;; contract:

(display "
    ;;  Contract: (every-other-one listy) -> list
    ;; ---------------------------------------------------------------
    ;;  INPUT:   LISTY, a list of any valid data types
    ;;  OUTPUT:  A list containing every other element of LISTY.
    ;;  Note:  The output list should contain roughly half the
    ;;    elements of LISTY; and their occurrences in the output list
    ;;    should be in the same order as their occurrences in LISTY.
\n\n")

;;
;; Use a higher order function such as map, apply, build-list etc.,
;; in your solution, along with some explicit recursion if you need it.

;;
;Here are some examples of its behavior:
;    > (every-other-one '(a b c d e f g))
;    (a c e g)
;    > (every-other-one '(a b c d e f))
;    (a c e)
;    > (every-other-one '(0 1 0 1 0 1 0 1 0 1))
;    (0 0 0 0 0)

;; Write at least 3 check-expects here:
(check-expect (every-other-one '(a b c d e f g)) '(a c e g))
(check-expect (every-other-one '(a b c d e f)) '(a c e))
(check-expect (every-other-one '(0 1 0 1 0 1 0 1 0 1)) '(0 0 0 0 0))

;; Display your check-expects here:
(display "
(check-expect (every-other-one '(a b c d e f g)) '(a c e g))
(check-expect (every-other-one '(a b c d e f)) '(a c e))
(check-expect (every-other-one '(0 1 0 1 0 1 0 1 0 1)) '(0 0 0 0 0))
\n\n")

;; Function definition:
(define every-other-one
  (lambda (listy)
    (letrec
        ;; Helper function to convert each element of listy into a two-element
        ;; list containing the element's index in listy followed by the element
        ;; (this allows us to keep track of each element's index so we know
        ;; which ones to delete)
        ((create-index-element-pairs
          (lambda (i lst)
            (cond
              ;; If lst is empty, end here
              [(empty? lst) '()]
              ;; Otherwise, add the next index-element pair to the new list
              [else
               (cons (list i (first lst))
                     (create-index-element-pairs (add1 i) (rest lst)))])))
         ;; Helper function to extract the original elements out of each
         ;; index-element pair (to be done after we filter out the odd-indexed
         ;; elements of listy)
         (get-second-pair-elements
          (lambda (pairs)
            (cond
              ;; If pairs is empty, end here
              [(empty? pairs) '()]
              ;; Otherwise, add the element from the current pair to the new
              ;; list
              [else (cons (first (reverse (first pairs)))
                          (get-second-pair-elements (rest pairs)))]))))
      ;; Return the result of converting each element of listy into an
      ;; index-element pair, removing the pairs with odd indexes, and converting
      ;; the remaining index-element pairs back to individual elements
      (get-second-pair-elements
       (filter (lambda (x) (even? (first x)))
               (create-index-element-pairs 0 listy))))))

(display "
;; Function definition:
(define every-other-one
  (lambda (listy)
    (letrec
        ;; Helper function to convert each element of listy into a two-element
        ;; list containing the element's index in listy followed by the element
        ;; (this allows us to keep track of each element's index so we know
        ;; which ones to delete)
        ((create-index-element-pairs
          (lambda (i lst)
            (cond
              ;; If lst is empty, end here
              [(empty? lst) '()]
              ;; Otherwise, add the next index-element pair to the new list
              [else
               (cons (list i (first lst))
                     (create-index-element-pairs (add1 i) (rest lst)))])))
         ;; Helper function to extract the original elements out of each
         ;; index-element pair (to be done after we filter out the odd-indexed
         ;; elements of listy)
         (get-second-pair-elements
          (lambda (pairs)
            (cond
              ;; If pairs is empty, end here
              [(empty? pairs) '()]
              ;; Otherwise, add the element from the current pair to the new
              ;; list
              [else (cons (first (reverse (first pairs)))
                          (get-second-pair-elements (rest pairs)))]))))
      ;; Return the result of converting each element of listy into an
      ;; index-element pair, removing the pairs with odd indexes, and converting
      ;; the remaining index-element pairs back to individual elements
      (get-second-pair-elements
       (filter (lambda (x) (even? (first x)))
               (create-index-element-pairs 0 listy))))))
\n\n")

;; Write printf statements to show tests on function below
(printf "(every-other-one '(a b c d e f g)) should be '(a c e g) and is ~a\n"
        (every-other-one '(a b c d e f g)))
(printf "(every-other-one '(a b c d e f)) should be '(a c e) and is ~a\n"
        (every-other-one '(a b c d e f)))
(printf "(every-other-one '(0 1 0 1 0 1 0 1 0 1)) should be '(0 0 0 0 0)
and is ~a\n\n" (every-other-one '(0 1 0 1 0 1 0 1 0 1)))
(test)

                                    
