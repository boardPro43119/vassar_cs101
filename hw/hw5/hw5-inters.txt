Welcome to DrRacket, version 7.2 [3m].
Language: Swindle; memory limit: 128 MB.

-----------------------------------
Assignment 5, Spring 2019
CS101-53 
Benjamin Prud'homme
-----------------------------------

       ;;  Contract:  (all-numbers? listy) -> boolean
       ;; -----------------------------------------------------------
       ;;  INPUT:   LISTY, a list
       ;;  OUTPUT:  #t (or something that counts as true) if all the
       ;;           items in LISTY are numbers; #f otherwise



;; Function tests:
(check-expect (all-numbers? '(1 2 3 4)) #t)
(check-expect (all-numbers? '(1 2 a b #t c 4)) #f)
(check-expect (all-numbers? '()) #f)



;; Function definition:
(define all-numbers?
  (lambda (listy)
    ;; Return true if the list is nonempty and contains only numbers;
    ;; false otherwise
    (and (not (empty? listy)) (andmap number? listy))))


(all-numbers? '(1 2 3 4)) should be #t and is #t
(all-numbers? '(1 2 a b #t c 4)) should be #f and is #f
(all-numbers? '()) should be #f and is #f

       ;;  Contract:  (any-numbers? listy) -> boolean
       ;; -----------------------------------------------------------------
       ;;  INPUT:   LISTY, a list
       ;;  OUTPUT:  #t (or something that counts as true) if any of the
       ;;           items in LISTY are numbers; #f otherwise



;; Function tests:
(check-expect (any-numbers? '(1 2 3 4)) #t)
(check-expect (any-numbers? '(1 2 a b #t c 4)) #t)
(check-expect (any-numbers? '()) #f)



;; Function definition:
(define any-numbers?
  (lambda (listy)
    ;; Return true if the list is nonempty and contains any numbers;
    ;; false otherwise
    (and (not (empty? listy)) (ormap number? listy))))


(any-numbers? '(1 2 3 4)) should be #t and is #t
(any-numbers? '(1 2 a b #t c 4)) should be #t and is #t
(any-numbers? '()) should be #f and is #f

    ;; Contract: (1st-symbol loa) -> symbol or #f
    ;; ---------------------------------------------------
    ;;  INPUT:   LOA, list of any valid types
    ;;  OUTPUT:  The first symbol that appears in LISTY;
    ;;           or #f, if no symbols appear in LISTY.



;; Function tests:
(check-expect (1st-symbol '(3 #t x y #f)) 'x)
(check-expect (1st-symbol '(1 2 3)) #f)
(check-expect (1st-symbol ('1 2 3 aa bb cc uu)) 'aa)



;; Function definition:
(define 1st-symbol
  (lambda (loa)
    (let
        ;; Store all of loa's symbols in a separate list
        ((los (filter symbol? loa)))
      (cond
        ;; If no symbols were found, return false
        [(empty? los) #f]
        ;; Otherwise, return the first symbol
        [else (first los)]))))


(1st-symbol '(3 #t x y #f)) should be x and is x
(1st-symbol '(1 2 3)) should be #f and is #f
(1st-symbol '(1 2 3 aa bb cc uu)) should be aa and is aa

    ;; Contract: (last-symbol loa) -> symbol or #f
    ;; ---------------------------------------------------
    ;;  INPUT:   LOA, list of any valid types
    ;;  OUTPUT:  The last symbol that appears in LISTY;
    ;;           or #f, if no symbols appear in LISTY.



;; Function tests:
(check-expect (last-symbol '(3 #t x y #f)) 'y)
(check-expect (last-symbol '(1 2 3)) #f)
(check-expect (last-symbol '(1 2 3 aa bb cc uu)) 'uu)



;; Function definition:
(define last-symbol
  (lambda (loa)
    (let
        ;; Store all of loa's symbols in a separate list
        ((los (filter symbol? loa)))
      (cond
        ;; If no symbols were found, return false
        [(empty? los) #f]
        ;; Otherwise, return the last symbol
        [else (first (reverse los))]))))


(last-symbol '(3 #t x y #f)) should be y and is y
(last-symbol '(1 2 3)) should be #f and is #f
(last-symbol '(1 2 3 aa bb cc uu)) should be uu and is uu

    ;; Contract: (dotties listy listz) -> number
    ;; ----------------------------------------------------------------
    ;;  INPUT:  LISTY, LISTZ, two lists of numbers, having
    ;;            the same length
    ;;  OUTPUT:  The "dot product" of LISTY and LISTZ.  In other
    ;;    words, if LISTY = (y1 y2 ... yn) and LISTZ = (z1 z2 ... zn),
    ;;    then the output is the sum:  y1*z1 + y2*z2 + ... + yn*zn.



;; Function tests:
(check-expect (dotties '(5 4 3) '(100 10 1)) 543)
(check-expect (dotties '(2 4) '(9 7)) 46)
(check-expect (dotties '(1 -2 1) '(2 3 4)) 0)



;; Function definition:
(define dotties
  (lambda (listy listz)
    ;; Compute the sum of the products of corresponding elements of listy and
    ;; listz
    (apply + (map * listy listz))))


(dotties '(5 4 3) '(100 10 1)) should be 543 and is 543
(dotties '(2 4) '(9 7)) should be 46 and is 46
(dotties '(1 -2 1) '(2 3 4)) should be 0 and is 0

    ;;  Contract (remove-if pred listy) -> list of inputs suitable for pred
    ;; ---------------------------------------------------------------------
    ;;  INPUTS:  PRED, a predicate that expects one input
    ;;           LISTY, a list of elements, each of which is a
    ;;           suitable input for PRED
    ;;  OUTPUT:  A list that contains all of the elements of LISTY,
    ;;           except those for which PRED returns #t.



(check-expect (remove-if even? '(1 2 3 4 5 6)) '(1 3 5))
(check-expect (remove-if odd? '(1 2 3 4 5 6)) '(2 4 6))
(check-expect (remove-if symbol? '(1 s 3 g b 5)) '(1 3 5))
(check-expect (remove-if symbol? '(a 1)) '(1))



;; Function definition:
(define remove-if
  (lambda (pred listy)
    (let
        ;; Define a new predicate function that returns the opposite of pred
        ((not-pred (lambda (le) (not (pred le)))))
      ;; Remove the elements that fail pred
      (filter not-pred listy))))


(remove-if even? '(1 2 3 4 5 6)) should be '(1 3 5) and is (1 3 5)
(remove-if odd? '(1 2 3 4 5 6)) should be '(2 4 6) and is (2 4 6)
(remove-if symbol? '(1 s 3 g b 5)) should be '(1 3 5) and is (1 3 5)
(remove-if symbol? '(a 1)) should be '(1) and is (1)

    ;;  Contract: (every-other-one listy) -> list
    ;; ---------------------------------------------------------------
    ;;  INPUT:   LISTY, a list of any valid data types
    ;;  OUTPUT:  A list containing every other element of LISTY.
    ;;  Note:  The output list should contain roughly half the
    ;;    elements of LISTY; and their occurrences in the output list
    ;;    should be in the same order as their occurrences in LISTY.



(check-expect (every-other-one '(a b c d e f g)) '(a c e g))
(check-expect (every-other-one '(a b c d e f)) '(a c e))
(check-expect (every-other-one '(0 1 0 1 0 1 0 1 0 1)) '(0 0 0 0 0))



;; Function definition:
(define every-other-one
  (lambda (listy)
    (letrec
        ;; Helper function to convert each element of listy into a two-element
        ;; list containing the element's index in listy followed by the element
        ;; (this allows us to keep track of each element's index so we know
        ;; which ones to delete)
        ((create-index-element-pairs
          (lambda (i lst)
            (cond
              ;; If lst is empty, end here
              [(empty? lst) '()]
              ;; Otherwise, add the next index-element pair to the new list
              [else
               (cons (list i (first lst))
                     (create-index-element-pairs (add1 i) (rest lst)))])))
         ;; Helper function to extract the original elements out of each
         ;; index-element pair (to be done after we filter out the odd-indexed
         ;; elements of listy)
         (get-second-pair-elements
          (lambda (pairs)
            (cond
              ;; If pairs is empty, end here
              [(empty? pairs) '()]
              ;; Otherwise, add the element from the current pair to the new
              ;; list
              [else (cons (first (reverse (first pairs)))
                          (get-second-pair-elements (rest pairs)))]))))
      ;; Return the result of converting each element of listy into an
      ;; index-element pair, removing the pairs with odd indexes, and converting
      ;; the remaining index-element pairs back to individual elements
      (get-second-pair-elements
       (filter (lambda (x) (even? (first x)))
               (create-index-element-pairs 0 listy))))))


(every-other-one '(a b c d e f g)) should be '(a c e g) and is (a c e g)
(every-other-one '(a b c d e f)) should be '(a c e) and is (a c e)
(every-other-one '(0 1 0 1 0 1 0 1 0 1)) should be '(0 0 0 0 0)
and is (0 0 0 0 0)

All 22 tests passed!
> 